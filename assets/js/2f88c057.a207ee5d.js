"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[6146],{2495:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>p,frontMatter:()=>a,metadata:()=>r,toc:()=>c});var o=t(85893),s=t(11151);const a={custom_edit_url:"https://github.com/microsoft/autogen/edit/main/notebook/agentchat_agentops.ipynb",description:"Use AgentOps to simplify the development process and monitor your agents in production.",source_notebook:"/notebook/agentchat_agentops.ipynb",tags:["monitoring","debugging"],title:"AgentOps"},i="AgentOps",r={id:"notebooks/agentchat_agentops",title:"AgentOps",description:"Use AgentOps to simplify the development process and monitor your agents in production.",source:"@site/docs/notebooks/agentchat_agentops.mdx",sourceDirName:"notebooks",slug:"/notebooks/agentchat_agentops",permalink:"/autogen/docs/notebooks/agentchat_agentops",draft:!1,unlisted:!1,editUrl:"https://github.com/microsoft/autogen/edit/main/notebook/agentchat_agentops.ipynb",tags:[{label:"monitoring",permalink:"/autogen/docs/tags/monitoring"},{label:"debugging",permalink:"/autogen/docs/tags/debugging"}],version:"current",frontMatter:{custom_edit_url:"https://github.com/microsoft/autogen/edit/main/notebook/agentchat_agentops.ipynb",description:"Use AgentOps to simplify the development process and monitor your agents in production.",source_notebook:"/notebook/agentchat_agentops.ipynb",tags:["monitoring","debugging"],title:"AgentOps"},sidebar:"notebooksSidebar",previous:{title:"Using RetrieveChat for Retrieve Augmented Code Generation and Question Answering",permalink:"/autogen/docs/notebooks/agentchat_RetrieveChat"},next:{title:"AgentOptimizer: An Agentic Way to Train Your LLM Agent",permalink:"/autogen/docs/notebooks/agentchat_agentoptimizer"}},l={},c=[{value:"Adding AgentOps to an existing Autogen service.",id:"adding-agentops-to-an-existing-autogen-service.",level:3},{value:"Tool Example",id:"tool-example",level:2}];function g(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",img:"img",p:"p",pre:"pre",...(0,s.a)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h1,{id:"agentops",children:"AgentOps"}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.a,{href:"https://colab.research.google.com/github/microsoft/autogen/blob/main/notebook/agentchat_agentops.ipynb",children:(0,o.jsx)(n.img,{src:"https://colab.research.google.com/assets/colab-badge.svg",alt:"Open In Colab"})}),"\n",(0,o.jsx)(n.a,{href:"https://github.com/microsoft/autogen/blob/main/notebook/agentchat_agentops.ipynb",children:(0,o.jsx)(n.img,{src:"https://img.shields.io/badge/Open%20on%20GitHub-grey?logo=github",alt:"Open on GitHub"})})]}),"\n",(0,o.jsxs)(n.p,{children:["Using ",(0,o.jsx)(n.a,{href:"https://agentops.ai/",children:"AgentOps"})," allows you to quickly and easily\nadd agent observability and monitoring to your Autogen services."]}),"\n",(0,o.jsxs)(n.admonition,{title:"Requirements",type:"info",children:[(0,o.jsx)(n.p,{children:"Some extra dependencies are needed for this notebook, which can be installed via pip:"}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"pip install pyautogen[agentops]\n"})}),(0,o.jsxs)(n.p,{children:["For more information, please refer to the ",(0,o.jsx)(n.a,{href:"/docs/installation/",children:"installation guide"}),"."]})]}),"\n",(0,o.jsx)(n.h3,{id:"adding-agentops-to-an-existing-autogen-service.",children:"Adding AgentOps to an existing Autogen service."}),"\n",(0,o.jsx)(n.p,{children:"It\u2019s as simple as adding two lines of code!"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"%pip install agentops\n"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"import agentops\n\nagentops.init()\n"})}),"\n",(0,o.jsxs)(n.p,{children:["By default, the AgentOps ",(0,o.jsx)(n.code,{children:"init()"})," function will look for an environment\nvariable named ",(0,o.jsx)(n.code,{children:"AGENTOPS_API_KEY"}),". Alternatively, you can pass one in as\nan optional parameter."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'agentops.init(api_key="xxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxxx")\n'})}),"\n",(0,o.jsx)(n.p,{children:"After initializing AgentOps, Autogen will now start automatically\ntracking - LLM calls - Agent names and actions - Tool usage -\nCorrespondence between agents - Errors - Token usage and costs"}),"\n",(0,o.jsxs)(n.p,{children:["You can retrieve your API key and view the results of your agent runs at\n",(0,o.jsx)(n.a,{href:"https://agentops.ai",children:"https://agentops.ai"})]}),"\n",(0,o.jsx)(n.h1,{id:"simple-chat-example",children:"Simple Chat Example"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'import agentops\n\nfrom autogen import ConversableAgent, UserProxyAgent, config_list_from_json\n\nagentops.init(api_key="your-api-key-here", tags=["simple-autogen-example"])\n\nconfig_list = config_list_from_json(env_or_file="OAI_CONFIG_LIST")\n\n# Create the agent that uses the LLM.\nassistant = ConversableAgent("agent", llm_config={"config_list": config_list})\n\n# Create the agent that represents the user in the conversation.\nuser_proxy = UserProxyAgent("user", code_execution_config=False)\n\n# Let the assistant start the conversation.  It will end when the user types exit.\nassistant.initiate_chat(user_proxy, message="How can I help you today?")\n\nagentops.end_session("Success")\n'})}),"\n",(0,o.jsxs)(n.p,{children:["You can view data on this run at\n",(0,o.jsx)(n.a,{href:"https://agentops.ai",children:"https://agentops.ai"}),". You should see LLM events\nfor each message sent by each agent, including the user. All data that\ncan be capture is captured."]}),"\n",(0,o.jsx)(n.h2,{id:"tool-example",children:"Tool Example"}),"\n",(0,o.jsxs)(n.p,{children:["In this example lets use Tools with Autogen. You can find more\ninformation on this example in\n",(0,o.jsx)(n.a,{href:"https://github.com/microsoft/autogen/blob/main/website/docs/tutorial/tool-use.ipynb",children:"tool-use.ipynb"})]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'from autogen import ConversableAgent, config_list_from_json, register_function\n\nagentops = None  # removing state from last code block\nfrom typing import Annotated, Literal\n\nimport agentops\n\nagentops.init(api_key="your-api-key-here", tags=["autogen-tool-example"])\n\nOperator = Literal["+", "-", "*", "/"]\n\n\ndef calculator(a: int, b: int, operator: Annotated[Operator, "operator"]) -> int:\n    if operator == "+":\n        return a + b\n    elif operator == "-":\n        return a - b\n    elif operator == "*":\n        return a * b\n    elif operator == "/":\n        return int(a / b)\n    else:\n        raise ValueError("Invalid operator")\n\n\nconfig_list = config_list_from_json(env_or_file="OAI_CONFIG_LIST")\n\n# Create the agent that uses the LLM.\nassistant = ConversableAgent(\n    name="Assistant",\n    system_message="You are a helpful AI assistant. "\n    "You can help with simple calculations. "\n    "Return \'TERMINATE\' when the task is done.",\n    llm_config={"config_list": config_list},\n)\n\n# The user proxy agent is used for interacting with the assistant agent\n# and executes tool calls.\nuser_proxy = ConversableAgent(\n    name="User",\n    llm_config=False,\n    is_termination_msg=lambda msg: msg.get("content") is not None and "TERMINATE" in msg["content"],\n    human_input_mode="NEVER",\n)\n\nassistant.register_for_llm(name="calculator", description="A simple calculator")(calculator)\nuser_proxy.register_for_execution(name="calculator")(calculator)\n\n# Register the calculator function to the two agents.\nregister_function(\n    calculator,\n    caller=assistant,  # The assistant agent can suggest calls to the calculator.\n    executor=user_proxy,  # The user proxy agent can execute the calculator calls.\n    name="calculator",  # By default, the function name is used as the tool name.\n    description="A simple calculator",  # A description of the tool.\n)\n\n# Let the assistant start the conversation.  It will end when the user types exit.\nuser_proxy.initiate_chat(assistant, message="What is (1423 - 123) / 3 + (32 + 23) * 5?")\n\nagentops.end_session("Success")\n'})}),"\n",(0,o.jsxs)(n.p,{children:["Again, if you go to ",(0,o.jsx)(n.a,{href:"https://agentops.ai",children:"https://agentops.ai"}),", you\nshould see data related to this run including: - Agents talking to each\nother - Each use of the ",(0,o.jsx)(n.code,{children:"calculator"})," tool - Each call to OpenAI for LLM\nuse"]})]})}function p(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(g,{...e})}):g(e)}},11151:(e,n,t)=>{t.d(n,{Z:()=>r,a:()=>i});var o=t(67294);const s={},a=o.createContext(s);function i(e){const n=o.useContext(a);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),o.createElement(a.Provider,{value:n},e.children)}}}]);